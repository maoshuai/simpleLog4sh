#---------------
# shell日志工具，提供类似log4j的日志级别功能
# 
# author: maoshuai
# version: 1.0.0.2016-04-21 实现基本功能，提供simpleLog4sh.cfg配置文件
#---------------

# 避免被多次导入
if [ "$_simpleLog4sh_sourced" ]; then
        return
fi
export _simpleLog4sh_sourced=1

# 设置默认配置
# 日志文件存储的根目录
simpleLog4sh_LOG_DIR="/tmp/simpleLog4sh"
# 日志级别
simpleLog4sh_LOG_LEVEL="ALL"
# 日志文件前缀
simpleLog4sh_LOG_FILE_NAME_PREFIX="simpleLog4sh"
# 日志文件后缀
simpleLog4sh_LOG_FILE_NAME_SUFFIX=".log"

# 运行用户自定义配置，配置文件需与shell同目录，并且名称为simpleLog4sh.cfg
if [ -f simpleLog4sh.cfg ];then
	. simpleLog4sh.cfg
fi


# 到此为止配置已经结束


# 日志级别常量，大于这个常量的才会打印
simpleLog4sh_LOG_LEVEL_NUM_ALL=-9000
simpleLog4sh_LOG_LEVEL_NUM_DEBUG=100
simpleLog4sh_LOG_LEVEL_NUM_INFO=200
simpleLog4sh_LOG_LEVEL_NUM_WARN=300
simpleLog4sh_LOG_LEVEL_NUM_ERROR=400
simpleLog4sh_LOG_LEVEL_NUM_OFF=9000

# 配置校验开始
# 日志目录的校验，目录存在必须保证可写
if [ -d $simpleLog4sh_LOG_DIR ];then
	if [ ! -w $simpleLog4sh_LOG_DIR ];then
		echo "simpleLog4sh_LOG_DIR is not writeable directory: $simpleLog4sh_LOG_DIR" >&2
		exit 1
	fi
fi

# 日志级别的转换
# 配置文件中的日志级别字符串，转换为数字
if [ x$simpleLog4sh_LOG_LEVEL = x"ALL" ];then
	simpleLog4sh_LOG_LEVEL_NUM=$simpleLog4sh_LOG_LEVEL_NUM_ALL
elif [ x$simpleLog4sh_LOG_LEVEL = x"DEBUG" ];then
	simpleLog4sh_LOG_LEVEL_NUM=$simpleLog4sh_LOG_LEVEL_NUM_DEBUG
elif [ x$simpleLog4sh_LOG_LEVEL = x"INFO" ];then
	simpleLog4sh_LOG_LEVEL_NUM=$simpleLog4sh_LOG_LEVEL_NUM_INFO
elif [ x$simpleLog4sh_LOG_LEVEL = x"WARN" ];then
	simpleLog4sh_LOG_LEVEL_NUM=$simpleLog4sh_LOG_LEVEL_NUM_WARN
elif [ x$simpleLog4sh_LOG_LEVEL = x"ERROR" ];then
	simpleLog4sh_LOG_LEVEL_NUM=$simpleLog4sh_LOG_LEVEL_NUM_ERROR
elif [ x$simpleLog4sh_LOG_LEVEL = x"OFF" ];then
	simpleLog4sh_LOG_LEVEL_NUM=$simpleLog4sh_LOG_LEVEL_NUM_OFF
else # 默认打印所有日志
	simpleLog4sh_LOG_LEVEL_NUM=$simpleLog4sh_LOG_LEVEL_NUM_ALL
fi



# 默认的log名
loggerName=$0




# 获取当前日志文件的地址
# 每天滚动一个日志文件
_getCurrentLogFile()
{
	if [ ! -e $simpleLog4sh_LOG_DIR ];then
		mkdir -p $simpleLog4sh_LOG_DIR
	fi 
	local logDate=$(date +"%Y%m%d")
	local todayLogFile=$simpleLog4sh_LOG_DIR/${simpleLog4sh_LOG_FILE_NAME_PREFIX}_${logDate}${simpleLog4sh_LOG_FILE_NAME_SUFFIX}
	if [ ! -e $todayLogFile ];then
		touch $todayLogFile
	fi 
	echo $todayLogFile
}








####################### 以下是暴露给用户的方法

# 抛异常
throw()
{
	if [ $# -ne 0 ];then
		myEchoError "$*" # 首先打印在stdError
		logError "$*" # 记录到error
	fi  
  	exit 1
}

# 代替echo，输出到标准输出
myEcho()
{
	echo "$*"
	if [ $simpleLog4sh_LOG_LEVEL_NUM -lt $simpleLog4sh_LOG_LEVEL_NUM_OFF ];then
		echo `date +%Y-%m-%d\ %H:%M:%S` [$loggerName]' (ECHO) '"$*" >> `_getCurrentLogFile`
	fi

}

# 代替echo，输出到标准错误输出
myEchoError()
{
	echo "(ERROR)" "$*" >&2
	if [ $simpleLog4sh_LOG_LEVEL_NUM -lt $simpleLog4sh_LOG_LEVEL_NUM_OFF ];then
		echo `date +%Y-%m-%d\ %H:%M:%S` [$loggerName]' (ECHO_ERROR) '"$*" >>  `_getCurrentLogFile`
	fi
}



logDebug()
{	
	if [ $simpleLog4sh_LOG_LEVEL_NUM -le $simpleLog4sh_LOG_LEVEL_NUM_DEBUG ];then
		echo `date +%Y-%m-%d\ %H:%M:%S` [$loggerName]' (DEBUG) '$* >>  `_getCurrentLogFile`
	fi
}



logInfo()
{
	
	if [ $simpleLog4sh_LOG_LEVEL_NUM -le $simpleLog4sh_LOG_LEVEL_NUM_INFO ];then
		echo `date +%Y-%m-%d\ %H:%M:%S` [$loggerName]' (INFO) '$* >>  `_getCurrentLogFile`
	fi
}

logWarn()
{

	if [ $simpleLog4sh_LOG_LEVEL_NUM -le $simpleLog4sh_LOG_LEVEL_NUM_WARN ];then
		echo `date +%Y-%m-%d\ %H:%M:%S` [$loggerName]' (WARN) '$* >>  `_getCurrentLogFile`
	fi
}


logError()
{
	
	if [ $simpleLog4sh_LOG_LEVEL_NUM -le $simpleLog4sh_LOG_LEVEL_NUM_ERROR ];then
		echo `date +%Y-%m-%d\ %H:%M:%S` [$loggerName]' (ERROR) '$* >>  `_getCurrentLogFile`
	fi
}

# TODO
logWithLine()
{
	echo `date +%Y-%m-%d\ %H:%M:%S` [$loggerName]' (ERROR) '$* >>  `_getCurrentLogFile`
}



#
##############################

